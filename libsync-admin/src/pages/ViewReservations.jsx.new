import React, { useEffect, useState } from 'react';
import Layout from '../components/Layout';
import Header from '../components/Header';
import Card from '../components/Card';
import Table from '../components/Table';
import api from '../utils/api';

const styles = {
  actionButtons: {
    display: 'flex',
    gap: '8px',
    flexWrap: 'wrap'
  },
  issueButton: {
    background: '#059669',
    color: 'white',
    border: 'none',
    borderRadius: '6px',
    padding: '6px 12px',
    fontSize: '12px',
    fontWeight: '500',
    cursor: 'pointer',
    transition: 'background-color 0.2s',
    ':hover': {
      background: '#047857'
    }
  },
  filterSelect: {
    padding: '8px 12px',
    borderRadius: '6px',
    border: '1px solid #e2e8f0',
    fontSize: '14px',
    width: '200px'
  }
};

export default function ViewReservations() {
  const [reservations, setReservations] = useState([]);
  const [loading, setLoading] = useState(true);
  const [settings, setSettings] = useState({ loanDurationDays: 14 });
  const [selectedStatus, setSelectedStatus] = useState('active');
  const [filteredReservations, setFilteredReservations] = useState([]);

  const filterReservations = (reservations, status) => {
    if (status === 'all') {
      setFilteredReservations(reservations);
    } else if (status === 'active') {
      setFilteredReservations(reservations.filter(res => res.status === 'Active'));
    } else if (status === 'fulfilled') {
      setFilteredReservations(reservations.filter(res => res.status === 'Fulfilled'));
    } else if (status === 'cancelled') {
      setFilteredReservations(reservations.filter(res => res.status === 'Cancelled'));
    }
  };

  // Effect to handle filtering when status changes
  useEffect(() => {
    filterReservations(reservations, selectedStatus);
  }, [selectedStatus, reservations]);

  const fetchReservations = async () => {
    try {
      setLoading(true);
      const response = await api.get('/reservations');
      const reservationData = Array.isArray(response.data) ? response.data : [];
      setReservations(reservationData);
      
      // Filter reservations based on selected status
      filterReservations(reservationData, selectedStatus);
    } catch (error) {
      console.error('Error loading reservations:', error);
      alert("Error loading reservations. Please check your authentication.");
    } finally {
      setLoading(false);
    }
  };

  const handleIssueBook = async (reservation) => {
    if (!reservation.book?._id || !reservation.student?._id) {
      alert('Book or student information is missing');
      return;
    }

    try {
      setLoading(true);
      
      // Calculate due date
      const dueDate = new Date();
      dueDate.setDate(dueDate.getDate() + settings.loanDurationDays);
      
      // First, validate the reservation
      if (reservation.status !== 'Active') {
        throw new Error('This reservation is no longer active');
      }

      // Then fulfill the reservation
      await api.put(`/reservations/${reservation._id}/fulfill`);

      // Wait a moment for the database to update
      await new Promise(resolve => setTimeout(resolve, 500));

      // Finally, issue the book
      await api.post('/loans/issue', {
        bookId: reservation.book._id,
        studentId: reservation.student._id,
        dueDate: dueDate.toISOString()
      });

      // Refresh the reservations list
      await fetchReservations();
      alert('Book issued successfully');
    } catch (error) {
      console.error('Error issuing book:', error);
      console.error('Error response:', error.response?.data);
      const errorMessage = error.response?.data?.message || 'Failed to issue book';
      alert(errorMessage);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    const initialize = async () => {
      try {
        setLoading(true);
        const [reservationsRes, settingsRes] = await Promise.all([
          api.get('/reservations'),
          api.get('/settings')
        ]);
        const reservationData = Array.isArray(reservationsRes.data) ? reservationsRes.data : [];
        setReservations(reservationData);
        setSettings(settingsRes.data || { loanDurationDays: 14 });
        filterReservations(reservationData, selectedStatus);
      } catch (error) {
        console.error('Error loading data:', error);
        alert("Error loading data. Please check your authentication.");
      } finally {
        setLoading(false);
      }
    };

    initialize();
  }, []);

  const getStudentLabel = (student) => {
    if (!student) return 'Unknown';
    if (typeof student === 'string') return student;
    return student.name || student.email || student.studentID || student._id || 'Unknown';
  };

  const columns = [
    {
      header: 'Book',
      key: 'book',
      render: (reservation) => (
        <div>
          <div style={{ fontWeight: '600', color: '#1f2937' }}>
            {reservation.book?.title || "Deleted Book"}
          </div>
          <div style={{ fontSize: '12px', color: '#6b7280' }}>
            ISBN: {reservation.book?.isbn || 'N/A'}
          </div>
        </div>
      )
    },
    {
      header: 'Student',
      key: 'student',
      render: (reservation) => (
        <div>
          <div style={{ fontWeight: '500' }}>
            {getStudentLabel(reservation.student)}
          </div>
          <div style={{ fontSize: '12px', color: '#6b7280' }}>
            {reservation.student?.email || 'N/A'}
          </div>
        </div>
      )
    },
    {
      header: 'Status',
      key: 'status',
      render: (reservation) => {
        let style = {
          padding: '4px 8px',
          borderRadius: '4px',
          fontSize: '12px',
          fontWeight: '500'
        };

        switch (reservation.status) {
          case 'Active':
            style.background = '#fef3c7';
            style.color = '#92400e';
            break;
          case 'Fulfilled':
            style.background = '#dcfce7';
            style.color = '#166534';
            break;
          case 'Cancelled':
            style.background = '#fee2e2';
            style.color = '#991b1b';
            break;
          default:
            style.background = '#e5e7eb';
            style.color = '#374151';
        }

        return (
          <span style={style}>
            {reservation.status}
          </span>
        );
      }
    },
    {
      header: 'Reserved Date',
      key: 'reservedAt',
      render: (reservation) => new Date(reservation.reservedAt).toLocaleDateString()
    },
    {
      header: 'Actions',
      key: 'actions',
      render: (reservation) => (
        <div style={styles.actionButtons}>
          {reservation.status === 'Active' && (
            <button
              onClick={(e) => {
                e.stopPropagation();
                handleIssueBook(reservation);
              }}
              style={styles.issueButton}
            >
              Issue Book
            </button>
          )}
        </div>
      )
    }
  ];

  return (
    <Layout>
      <Header 
        title="View Reservations" 
        subtitle="Manage all book reservations"
      />

      <Card 
        title="Filter Reservations" 
        subtitle="Filter reservations by their status" 
        icon="🔍" 
        color="#3b82f6"
        style={{ marginBottom: '24px' }}
      >
        <div style={{ display: 'flex', gap: '16px', alignItems: 'center' }}>
          <select
            value={selectedStatus}
            onChange={(e) => setSelectedStatus(e.target.value)}
            style={styles.filterSelect}
          >
            <option value="active">Active Reservations</option>
            <option value="fulfilled">Fulfilled Reservations</option>
            <option value="cancelled">Cancelled Reservations</option>
            <option value="all">All Reservations</option>
          </select>
        </div>
      </Card>
      
      <Card 
        title="Reservation Records" 
        subtitle={`Showing ${filteredReservations.length} ${selectedStatus} reservation${filteredReservations.length !== 1 ? 's' : ''}`} 
        icon="📌" 
        color="#f59e0b"
      >
        {loading ? (
          <div style={{ textAlign: 'center', padding: '40px' }}>
            <div style={{ fontSize: '16px', color: '#6b7280' }}>Loading reservations...</div>
          </div>
        ) : (
          <Table 
            columns={columns} 
            data={filteredReservations}
            emptyMessage={`No ${selectedStatus} reservations found`}
          />
        )}
      </Card>
    </Layout>
  );
}